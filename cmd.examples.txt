cms -> Show menu
gcms config set api_token <token> -> Sets the api token
gcms config get api_token -> Gets the api token

gcms init --from <github_link> -> Clones this repo and tries to make it the gcms repo
gcms init --empty -> Initializes an empty repo and sets it as the gcms repo
gcms info repo -> Get information about the GCMS local repo
gcms info remote -> Gets information about the GCMS remote repo

gcms detach -> Soft detach just detaches the remote repository
gcms detach --hard -> Hard detches and deletes the remote repository given sufficient perms

gcms push <filename>.html -> Pushes the filename to the repo
gcms push (-c / --convert) <filename>.ipynb -> Converts the ipynb file to html and pushes
gcms list -> Lists all the files in the local repo
gcms remove <filename>.html -> Removes the files from the local and remote


---- How Pushing is going to work ----
GCMS will have a gcms.hist file that will track every transaction including:
  - Pushing a new file
  - Modifying it
  - Deleting it

ðŸŸ¡ This is just for reports. 
â­• Backup and reverting is entirely controlled by the git backend, so won't have to worry about that.


-- Further improvements on pushin --
Gonna need something like a metadata.json that holds the metadata for each file

>>metadata.json
{
  "lastUpdated": "XXX:XXXTXX:XXZ",
  "files": [
    {
      "filepath": "abc.html",
      "title": "abcdef",
      "XYZ": "ABC",
    }
  ]
}

So the push would look like:
gcms push abcdef.html -g  kaggle  -mt     title=a new title;another_data=value
            ^          ^    ^       ^       ^     ^      ^
          File path  Group group Metadata  Key  Value  Delimiter(;) 


>>> Huh forms and Charm CLI integration
Gonna make the CLI more beautiful and interactive

# Plan
Add a new schema item that defines the schema for each group's metadata.
Hence, the user has to create a group before pushing to that group
When creating a group, the user has to define that schema

>>> Examples in JSON but the final will be in YAML format
{
    "kaggle": {
        "schema": [
              ("title", "singleline"),
              ("description", "textarea"),
         ]
    }
}